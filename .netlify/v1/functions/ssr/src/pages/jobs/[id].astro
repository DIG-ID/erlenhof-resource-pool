---

import { firestore } from "@/firebase/server";
import type { Job } from "@/lib/types";
import { formatDate } from "@/lib/utils";

import Layout from "@/layouts/Layout.astro"
import Dashboard from "@/components/Dashboard.astro";
import { Button } from "@/components/ui/button";
import { AlertDialogDelete } from "@/components/alert-dialog-delete";
import { Pencil, CalendarDays, Award, GalleryVerticalEnd, Fingerprint, User, CheckCircle, FileText, UserCircle } from "lucide-react";

const { userData } = Astro.locals;

const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/404");
}

const jobsRef = firestore.collection("jobs");
const jobSnapshot = await jobsRef.doc(id).get();

if (!jobSnapshot.exists) {
  return Astro.redirect("/404");
}

const job = jobSnapshot.data() as Job;

---

<Layout title={job.title} >
  <Dashboard >
    <div class="flex w-full scroll-mt-16 flex-col rounded-lg border">
      <div class="border-b px-4 py-3 flex flex-col lg:flex-row lg:justify-between lg:items-center gap-y-6 lg:gap-y-0">
        <div class="flex flex-col lg:flex-row items-start lg:items-center gap-x-4 gap-y-2 lg:gap-y-0">
          <h1 class="text-lg font-semibold break-all">{job.title}</h1>
          <span class="relative rounded bg-muted px-2 py-1 font-mono text-xs font-medium flex items-center gap-x-2">
            <Fingerprint size={16}/> {id}
          </span>
        </div>
        
        <div class="flex flex-col lg:flex-row lg:items-center gap-y-2 lg:gap-y-0 gap-x-3 text-sm">
          <span class="flex items-center gap-x-1">
            <GalleryVerticalEnd size={16}/> <span class="font-medium">Pool:</span> {job.roles || "Not provided"}
          </span>
          <span class="flex items-center gap-x-1">
            <Award size={16}/> <span class="font-medium">Status:</span> {job.status || "Not provided"}
          </span>
          <span class="flex items-center gap-x-1">
            <CalendarDays size={16}/> <span class="font-medium">Job Date:</span> {job.date ? formatDate(job.date) : "Not provided"}
          </span>
          <span class="flex items-center gap-x-1">
            <CalendarDays size={16}/> <span class="font-medium">Created:</span> {job.createdAt ? formatDate(job.createdAt) : "Not provided"}
          </span>
          <span class="flex items-center gap-x-1">
            <CheckCircle size={16}/> <span class="font-medium">Assigned:</span> {job.assigned ? "Yes" : "No"}
          </span>
        </div>
      </div>

      <div class="p-6">
        <div class="mb-6">
          <p class="font-medium flex items-center gap-x-2"><FileText size={16}/> Description</p>
          <p class="leading-7 mt-2">{job.description || "Not provided"}</p>
        </div>

        <div class="mb-6">
          <p class="font-medium flex items-center gap-x-2"><FileText size={16}/> Notes</p>
          <p class="leading-7 mt-2">{job.notes || "Not provided"}</p>
        </div>

        <div class="mb-6">
          <p class="font-medium flex items-center gap-x-2"><User size={16}/> Assigned To</p>
          <p class="leading-7 mt-2">
            {job.assignedTo && job.assignedTo.name && job.assignedTo.email
              ? `${job.assignedTo.name || "Unknown"} ${job.assignedTo.surname || ""} (${job.assignedTo.email})`
              : "Not assigned"}
          </p>
        </div>

        <!-- ðŸ”¥ Novo bloco para mostrar quem criou o job -->
        {job.createdBy && (
          <div class="mt-8 text-sm text-gray-500 border-t pt-4">
            <p class="flex items-center gap-x-2 text-gray-600">
              <UserCircle size={18} /> Created by:
            </p>
            <p class="mt-1">{job.createdBy.name} {job.createdBy.surname} ({job.createdBy.email})</p>
          </div>
        )}

        <div class="flex justify-end gap-x-4 mt-6">
          <!-- Se o job nÃ£o estiver atribuÃ­do, mostra botÃ£o "Assign" -->
          { !job.assigned ? (
            <form method="post" action="/api/jobs/assign">
              <input type="hidden" name="jobId" value={id} />
              <Button type="submit" className="bg-green-600 text-white cursor-pointer" size="sm">
                <CheckCircle size={16} /> Apply to Job
              </Button>
            </form>
          ) : (
            <!-- Se o job jÃ¡ estiver atribuÃ­do, mostra botÃ£o desativado -->
            <Button disabled class="bg-gray-400 text-white cursor-not-allowed">
              <CheckCircle size={16} /> Taken
            </Button>
          )}
          { (userData.role === 'admin' || userData.role === 'super_admin') && (
            <Button><Pencil /><a href={`/jobs/edit/${id}`}> Edit Job</a></Button>
            <AlertDialogDelete
              id={id}
              resourceType="jobs"
              client:load
              triggerText="Delete Job"
              title="Are you sure you want to delete this Job?"
              description="This will permanently delete the job from the database."
              cancelText="No, cancel"
              actionText="Yes, delete"
            />
          )}

        </div>
      </div>
    </div>
  </Dashboard>
</Layout>
