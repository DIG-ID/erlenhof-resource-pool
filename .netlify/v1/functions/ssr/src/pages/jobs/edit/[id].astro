---

import { firestore } from "@/firebase/server";
import { getRolesData, getStatusData } from "@/hooks/get-data";
import type { Job } from "@/lib/types";
import { formatDate } from "@/lib/utils"; // ðŸ”¥ Importa a nova funÃ§Ã£o

import Layout from "@/layouts/Layout.astro";
import Dashboard from "@/components/Dashboard.astro";
import { ComponentWrapper } from "@/components/ui/component-wrapper";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { SelectRole } from '@/components/select-role';
import { SelectStatus } from '@/components/select-status';
import { AlertDialogDelete } from "@/components/alert-dialog-delete";
import { DatePicker } from '@/components/date-picker.tsx';
import { RefreshCw } from "lucide-react";

const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/404");
}

const jobsRef = firestore.collection("jobs");
const jobSnapshot = await jobsRef.doc(id).get();

if (!jobSnapshot.exists) {
  return Astro.redirect("/404");
}

const job = jobSnapshot.data() as Job;
const roles = await getRolesData();
const status = await getStatusData();

const limitedRoles = roles.filter(role => role.id === 'level_01' || role.id === 'level_02');

// ðŸ”¥ Converte `job.date` (Firestore Timestamp) para um formato compatÃ­vel com `datetime-local`
const formattedDate = formatDate(job.date, "yyyy-MM-dd'T'HH:mm");

---

<Layout title={`Edit ${job.title}`}>
  <Dashboard >
    <ComponentWrapper name=`Edit ${job.title}` id={id}>
      <form method="post" action={`/api/jobs/${id}`} class="w-full">
        <div class="flex flex-col gap-y-8">
          <div class="grid grid-cols-3 gap-x-4">
            <div class="flex flex-col gap-y-4">
              <Label htmlFor="date" className="font-medium">Date & Time</Label>
              <DatePicker name="date" defaultValue={formattedDate} client:load/>
            </div>
            <div class="flex flex-col gap-y-4">
              <Label htmlFor="roles" className="font-medium">Pool</Label>
              <SelectRole roles={limitedRoles} name="roles" value={job.roles} client:load/>
            </div>
            <div class="flex flex-col gap-y-4">
              <Label htmlFor="status" className="font-medium">Status</Label>
              <SelectStatus status={status} name="status" value={job.status} client:load/>
            </div>
          </div>
          <div class="flex flex-col gap-y-4">
            <Label htmlFor="title">Title</Label>
            <Input type="text" id="title" name="title" defaultValue={job.title} />
          </div>
          <div class="flex flex-col gap-y-4">
            <Label htmlFor="description">Description</Label>
            <Textarea id="textarea" name="description" defaultValue={job.description} />
          </div>
          <div class="flex flex-col gap-y-4">
            <Label htmlFor="notes">Notes</Label>
            <Textarea id="notes" name="notes" defaultValue={job.notes} />
          </div>
          <div class="flex gap-x-4 justify-end">
            <Button type="submit"><RefreshCw /> Update Job</Button>
            <AlertDialogDelete
              id={id}
              resourceType="jobs"
              client:load
              triggerText="Delete Job"
              title="Are you sure you want to delete this Job?"
              description="This will permanently delete the job from the database."
              cancelText="No, cancel"
              actionText="Yes, delete"
            />
          </div>
        </div>
      </form>
    </ComponentWrapper>
  </Dashboard>
</Layout>
