---
import { firestore } from "@/firebase/server";
import type { State, Job, Role } from "@/lib/types";

import Layout from "@/layouts/Layout.astro";
import Dashboard from "@/components/Dashboard.astro";
import { ComponentWrapper } from "@/components/ui/component-wrapper";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { SelectRole } from '@/components/select-role';
import { SelectStatus } from '@/components/select-status';

const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/404");
}

const jobsRef = firestore.collection("jobs");
const jobSnapshot = await jobsRef.doc(id).get();

if (!jobSnapshot.exists) {
  return Astro.redirect("/404");
}

const job = jobSnapshot.data() as Job;

const rolesRef = firestore.collection("roles");
const rolesSnapshot = await rolesRef.get();
const roles = rolesSnapshot.docs.map((doc) => ({
  id: doc.id,
  ...doc.data(),
})) as Role[];

const statusRef = firestore.collection("status");
const statusSnapshot = await statusRef.get();
const status = statusSnapshot.docs.map((doc) => ({
  id: doc.id,
  ...doc.data(),
})) as State[];

const limitedRoles = roles.filter(role => Number(role.id) === 3 || Number(role.id) === 4);

---

<Layout title=`Edit ${job.title}`>
  <Dashboard >
    <ComponentWrapper name=`Edit ${job.title} `>
  
        <form method="post" action={`/api/jobs/${id}`} class="w-full">
  
          <div class="flex flex-col gap-y-8">
            <div class="flex flex-col gap-y-4">
              <Label htmlFor="title">Title</Label>
              <Input type="text" id="title" name="title" defaultValue={job.title} />
            </div>
            <div class="flex flex-col gap-y-4">
              <Label htmlFor="smallDescription">Small Description</Label>
              <Textarea id="textarea" name="smallDescription" defaultValue={job.smallDescription} />
            </div>
  
            <div class="grid grid-cols-2 gap-x-4">
              <div class="flex flex-col gap-y-4">
                <Label htmlFor="roles" className="font-medium">Pool</Label>
                <SelectRole roles={limitedRoles} name="roles" value={job.roles} client:load/>
              </div>
    
              <div class="flex flex-col gap-y-4">
                <Label htmlFor="status" className="font-medium">Status</Label>
                <SelectStatus status={status} name="status" value={job.status} client:only="react"/>
              </div>
            </div>
  
            <div class="flex flex-col gap-y-4">
              <Button type="submit">Update Job</Button>
              <Button type="button" id="delete-document" variant={"destructive"}>Delete Job</Button>
            </div>
          </div>
  
        </form>
    
    </ComponentWrapper>
  </Dashboard>
</Layout>

<script>
  const deleteButton = document.getElementById(
    "delete-document"
  ) as HTMLButtonElement;
  const url = document.querySelector("form")?.getAttribute("action") as string;
  deleteButton.addEventListener("click", async () => {
    const response = await fetch(url, {
      method: "DELETE",
    });
    if (response.redirected) {
      window.location.assign(response.url);
    }
  });
</script>