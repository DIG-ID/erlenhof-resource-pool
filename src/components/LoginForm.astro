---
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";

const { className, ...props } = Astro.props;
---

<div class={`flex flex-col gap-6 ${className || ""}`} {...props}>
  <Card>
    <CardHeader className="text-center">
      <CardTitle className="text-xl">Login to your account</CardTitle>
      <CardDescription>
        Enter your email below to login to your account
      </CardDescription>
    </CardHeader>
    <CardContent className="p-6 pt-0">
      <form id="login-form" action="/api/auth/signin" method="post">
        <div class="grid gap-6">
          <div class="grid gap-6">
            <div class="grid gap-2">
              <Label htmlFor="email">Email</Label>
              <Input type="email" name="email" id="email" placeholder="m@example.com" required />
            </div>
            <div class="grid gap-2">
              <div class="flex items-center">
                <Label htmlFor="password">Password</Label>
                <a href="/forgot-password" class="ml-auto text-sm underline-offset-4 hover:underline"> Forgot your password?</a>
              </div>
              <Input type="password" name="password" id="password" required />
              <!-- Error message for password validation -->
              <Alert id="password-error" variant="destructive" className="hidden mt-2">
                <AlertDescription id="password-error-message"></AlertDescription>
              </Alert>
            </div>
            <Button type="submit" className="w-full">Login</Button>
          </div>
          <div class="text-center text-sm">
            Don&apos;t have an account?{" "}
            <a href="/register" class="underline underline-offset-4">
              Sign up
            </a>
          </div>
        </div>
      </form>
    </CardContent>
  </Card>
  <div class="text-balance text-center text-xs text-muted-foreground [&_a]:underline [&_a]:underline-offset-4 [&_a]:hover:text-primary  "> By clicking continue, you agree to our <a href="#">Terms of Service</a>{" "} and <a href="#">Privacy Policy</a>.
  </div>
</div>

<script>
  import {
    getAuth,
    inMemoryPersistence,
    signInWithEmailAndPassword,
    validatePassword,
  } from "firebase/auth";
  import { app } from "../firebase/client";

  const auth = getAuth(app);
  auth.setPersistence(inMemoryPersistence);

  // Handle form submission
  const form = document.querySelector("#login-form");
  const passwordError = document.querySelector("#password-error");
  const passwordErrorMessage = document.querySelector("#password-error-message");

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const email = formData.get("email")?.toString();
    const password = formData.get("password")?.toString();

    if (!email || !password) {
      return;
    }

    // Validate password using Firebase's validatePassword
    try {
      const status = await validatePassword(auth, password);
      const policy = status.passwordPolicy;

      // Check if password meets the policy
      if (!status.isValid) {
        const errors = policy.requirements
          .filter((req) => !req.isMet)
          .map((req) => req.message);

        passwordErrorMessage.textContent = errors.join("\n");
        passwordError.classList.remove("hidden");
        return;
      }

      // Clear error messages
      passwordErrorMessage.textContent = "";
      passwordError.classList.add("hidden");

      // Attempt login
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      const idToken = await userCredential.user.getIdToken();
      const response = await fetch("/api/auth/signin", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${idToken}`,
        },
      });

      if (response.redirected) {
        window.location.assign(response.url);
      }
    } catch (error) {
      passwordErrorMessage.textContent = "Login failed. Please check your credentials.";
      passwordError.classList.remove("hidden");
    }
  });
</script>