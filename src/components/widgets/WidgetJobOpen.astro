---

import { getJobsData } from "@/hooks/get-data";
import { formatDate } from "@/lib/utils";
import { ComponentWrapper } from "@/components/ui/component-wrapper";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Button } from "@/components/ui/button";
import { Eye, CalendarDays, CheckCircle } from "lucide-react";

const { userData } = Astro.locals;
// Buscar jobs diretamente
const jobs = await getJobsData();


// Filtrar jobs com status "open" e role "level_01", ordenando por data do mais recente para o mais antigo
const filteredJobs = jobs
  .filter(job => job.status.id === "open" && job.education.id === userData.education.id  && job.pool.id === userData.pool.id)
  .sort((a, b) => new Date(a.date.seconds * 1000) - new Date(b.date.seconds * 1000));


---


  <ComponentWrapper name="Open Jobs">
    <section class="job-list w-full">
      {filteredJobs.length === 0 ? (
        <p>No open jobs available.</p>
      ) : (
        <div class="grid grid-cols-4 gap-6">
          {filteredJobs.map(job => (
            <Card key={job.id} className="shadow-none">
              <CardHeader>
                <CardTitle>{job.title}</CardTitle>
                <CardDescription className="flex items-center gap-1"><CalendarDays size={16} />Date: {formatDate(job.date)}</CardDescription>
              </CardHeader>
              <CardContent>
                {job.description}
              </CardContent>
              <CardFooter className="flex justify-between">
                <div class="flex justify-end items-center gap-2 w-full">
                  <Button variant="outline" className="cursor-pointer"><Eye /><a href={`/jobs/${job.id}`}>View Job</a></Button>
                  <form method="post" action={`/api/jobs/assign`} class="w-full">
                    <input type="hidden" name="jobId" value={job.id} />
                    <Button className="bg-green-600 text-white cursor-pointer" type="submit"><CheckCircle />Apply</Button>
                  </form>
                </div>
              </CardFooter>
            </Card>
          ))}
        </div>
      )}
    </section>
  </ComponentWrapper>


<script type="module" is:inline>
  import { useJobActions } from "@/hooks/use-job-actions";
  const { assignJob } = useJobActions();

  // Função para lidar com o envio do formulário
  async function handleFormSubmit(event) {
    event.preventDefault();
    const formData = new FormData(event.target);
    const jobId = formData.get("jobId");

    try {
      await assignJob(jobId);
      // Aqui você pode adicionar lógica para mostrar uma mensagem de sucesso ou redirecionar
    } catch (error) {
      console.error("Erro ao atribuir o job:", error);
      // Aqui você pode adicionar lógica para mostrar uma mensagem de erro
    }
  }
</script>