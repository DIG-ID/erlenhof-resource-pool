---

import { getOpenJobsForUser } from "@/hooks/get-data";
import { formatDate } from "@/lib/utils";
import { ComponentWrapper } from "@/components/ui/component-wrapper";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Button } from "@/components/ui/button";
import { Eye, CalendarDays } from "lucide-react";
import { JobActions } from "@/components/jobs/job-actions";

const { userData } = Astro.locals;

// üîê Redirecionar se n√£o estiver autenticado
if (!userData) {
  return Astro.redirect("/auth/login");
}

// Buscar jobs diretamente
const filteredJobs = await getOpenJobsForUser(userData);

---


  <ComponentWrapper name="Open Jobs">
    <section class="job-list w-full">
      {filteredJobs.length === 0 ? (
        <p>No open jobs available.</p>
      ) : (
        <div class="grid grid-cols-4 gap-6">
          {filteredJobs.map(job => (
            <Card key={job.id} className="shadow-none">
              <CardHeader>
                <CardTitle>{job.title}</CardTitle>
                <CardDescription className="flex items-center gap-1"><CalendarDays size={16} />Date: {formatDate(job.date)}</CardDescription>
              </CardHeader>
              <CardContent>
                {job.description}
              </CardContent>
              <CardFooter className="flex justify-between">
                <div class="flex justify-end items-center gap-2 w-full">
                  <Button variant="outline" className="cursor-pointer"><Eye /><a href={`/jobs/${job.id}`}>View Job</a></Button>
                  <JobActions job={job} userData={userData} client:load/>
                </div>
              </CardFooter>
            </Card>
          ))}
        </div>
      )}
    </section>
  </ComponentWrapper>

