---

import { firestore } from "@/firebase/server";
import type { UserData } from "@/lib/types";
import Layout from "@/layouts/Layout.astro"
import Dashboard from "@/components/Dashboard.astro";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { ComponentWrapper } from "@/components/ui/component-wrapper";
import { AlertDialogDelete } from "@/components/alert-dialog-delete";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Pencil, Plus, Eye, Fingerprint, Mail, GalleryVerticalEnd, User, Award } from "lucide-react";


const usersRef = firestore.collection("users");
const usersSnapshot = await usersRef.get();
const users = usersSnapshot.docs.map((doc) => ({
  id: doc.id,
  ...doc.data(),
})) as UserData[];

---

<Layout title="Users">
  <Dashboard >
    <ComponentWrapper name="users">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead><span class="flex items-center gap-2"><Fingerprint size={16}/> ID</span></TableHead>
            <TableHead><span class="flex items-center gap-2"><User size={16}/>Name</span></TableHead>
            <TableHead><span class="flex items-center gap-2"><Mail size={16}/>Email</span></TableHead>
            <TableHead><span class="flex items-center gap-2"><GalleryVerticalEnd size={16}/>Pool</span></TableHead>
            <TableHead><span class="flex items-center gap-2"><Award size={16}/>Profile Status</span></TableHead>
            <TableHead className="text-right"></TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {users.map((user) => (
            <TableRow key={user.id}>
              <TableCell className="font-medium">{user.id}</TableCell>
              <TableCell>{user.name}{ }{user.surname}</TableCell>
              <TableCell>{user.email}</TableCell>
              <TableCell>{user.role}</TableCell>
              <TableCell>
                {user.isActive ? (
                  <Badge>Active</Badge>
                ) : (
                  <Badge variant="secondary">Inactive</Badge>
                )}
              </TableCell>
              <TableCell className="text-right">
                <Button variant={"outline"}><a href={`/users/${user.id}`}><Eye /></a></Button>
                <Button><a href={`/users/edit/${user.id}`}><Pencil /></a></Button>
                <AlertDialogDelete
                  id={user.id}
                  resourceType="users"
                  client:load
                  triggerText=""
                  title="Are you sure you want to delete this User?"
                  description="This will permanently delete the User from the database."
                  cancelText="No, cancel"
                  actionText="Yes, delete"
                />
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </ComponentWrapper>
    <Button className="self-end"><Plus /><a href={`/users/add`}>Add New User</a></Button>
  </Dashboard>
</Layout>