---

import { firestore } from "@/firebase/server";
import type { Skills } from "@/lib/types";
import Layout from "@/layouts/Layout.astro";
import DashboardWrapper from "@/components/DashboardWrapper.astro";
import { ComponentWrapper } from "@/components/ui/component-wrapper";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { AlertDialogDelete } from "@/components/alert-dialog-delete";
import { RefreshCw } from "lucide-react";

const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/404");
}

const educationRef = firestore.collection("education");
const eduSnapshot = await educationRef.doc(id).get();

if (!eduSnapshot.exists) {
  return Astro.redirect("/404");
}

const edu = eduSnapshot.data() as Skills;

---

<Layout title={`Edit ${edu.name}`}>
  <DashboardWrapper>
    <ComponentWrapper name=`Edit ${edu.name}`>
      <form method="post" action={`/api/education/${id}`} class="w-full">
        <div class="flex flex-col gap-y-8">
          <div class="grid grid-cols-2 gap-x-4">
            <div class="flex flex-col gap-y-4">
              <Label htmlFor="name">Name</Label>
              <Input type="text" id="name" name="name" defaultValue={edu.name} />
              <span class="text-red-500 text-sm"></span>
            </div>
          </div>
          <div class="flex gap-x-4 justify-end">
            <Button id="submit-button" type="submit" className="self-end cursor-pointer" disabled><RefreshCw /> Update Item</Button>
            <AlertDialogDelete
              id={id}
              resourceType="education"
              client:load
              triggerText="Delete Item"
              title="Are you sure you want to delete this item?"
              description="This will permanently delete the item from the database."
              cancelText="No, cancel"
              actionText="Yes, delete"
            />
          </div>
        </div>
      </form>
    </ComponentWrapper>
  </DashboardWrapper>
</Layout>

<script>
  import { z } from "zod";

  document.addEventListener("DOMContentLoaded", () => {
    const input = document.getElementById("name");
    const submitButton = document.getElementById("submit-button");

    if (!input || !submitButton) return; // Evita erros se os elementos não existirem

    // Esquema de validação com Zod
    const educationSchema = z.object({
      name: z.string()
        .min(3, "Name must be at least 3 characters")
        .max(50, "Name must be at most 50 characters"),
    });

    function validateInput(event) {
      const input = event.target;
      const errorSpan = input.nextElementSibling;

      const validation = educationSchema.safeParse({ name: input.value });

      if (!validation.success) {
        errorSpan.textContent = validation.error.errors[0].message;
        input.classList.add("border-red-500");
        submitButton.disabled = true;
      } else {
        errorSpan.textContent = "";
        input.classList.remove("border-red-500");
        submitButton.disabled = false;
      }
    }

    // Adiciona o evento ao input
    input.addEventListener("input", validateInput);
  });
</script>