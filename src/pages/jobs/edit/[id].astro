---
import { getShiftsData, getEducationData, getJobSingleData, getPoolsData, getProperties } from "@/hooks/get-data";
import { timestampToDateInputValue } from "@/lib/utils";
import Layout from "@/layouts/Layout.astro";
import DashboardWrapper from "@/components/DashboardWrapper.astro";
import { ComponentWrapper } from "@/components/ui/component-wrapper";
import ProtectedComponent from "@/components/protected-component";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { SelectEducation } from '@/components/select-education';
import { SelectShifts } from '@/components/select-shifts';
import { SelectPools } from '@/components/select-pools';
import { SelectProperty } from '@/components/select-property';
import { AlertDialogDelete } from "@/components/alert-dialog-delete";
import { DatePicker } from '@/components/date-picker.tsx';
import { RefreshCw } from "lucide-react";

const { id } = Astro.params;
if (!id) {
  return Astro.redirect("/404");
}

const { userData } = Astro.locals;
if (!userData) {
  return Astro.redirect("/auth/login");
}

const education = await getEducationData();
const shifts = await getShiftsData();
const pools = await getPoolsData();
const properties = await getProperties();
const job = await getJobSingleData(id);

if (!job) {
  return Astro.redirect("/404");
}
console.log(job);
---

<Layout title={`Bearbeiten ${job.shift.name}`}>
  <DashboardWrapper>
    <ComponentWrapper name=`Bearbeiten ${job.shift.name}` id={id}>
      <form method="post" action={`/api/jobs/${id}`} class="w-full">
        <div class="flex flex-col gap-y-8">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-x-4">
            <div class="col-span-1 flex flex-col gap-y-6">
              <div class="flex flex-col gap-y-4">
                <Label htmlFor="shifts" className="font-medium">Schichten</Label>
                <SelectShifts shifts={shifts || []} name="shifts" value={JSON.stringify({ id: job.shift.id, name: job.shift.name, details: job.shift.details }) || ""} client:load/>
              </div>
              <div class="flex flex-col gap-y-4">
                <Label htmlFor="date" className="font-medium">Datum</Label>
                <DatePicker name="date" defaultValue={timestampToDateInputValue(job.date)} client:load/>
              </div>
              <div class="flex flex-col gap-y-4">
                <Label htmlFor="education" className="font-medium">Bereich</Label>
                <SelectEducation education={education || []} name="education" value={JSON.stringify({ id: job.education.id, name: job.education.name }) || ""} client:load/>
              </div>
              <div class="flex flex-col gap-y-4">
                <ProtectedComponent allowedRoles={["super_admin"]} userRole={userData.role.id}>
                  <Label htmlFor="propertys" className="font-medium">Wohngruppe</Label>
                  <SelectProperty properties={properties} name="property" value={JSON.stringify(job.property)} client:load/>
                </ProtectedComponent>
              </div>
              <div class="flex flex-col gap-y-4">
                <Label htmlFor="pools" className="font-medium">Gruppe</Label>
                <SelectPools pools={pools || []} name="pools" value={JSON.stringify({ id: job.pool.id, name: job.pool.name }) || ""} client:load/>
              </div>

            </div>
            <div class="col-span-1 flex flex-col gap-y-6">
              <div class="flex flex-col gap-y-4">
                <Label htmlFor="notes">Notiz</Label>
                <Textarea id="notes" name="notes" defaultValue={job.notes} />
              </div>
              <div class="flex flex-col gap-y-4">
                <Label htmlFor="reason">Grund</Label>
                <Textarea id="textarea" name="reason" defaultValue={job.reason} />
              </div>
            </div>
          </div>
          <div class="flex gap-x-4 justify-end">
            <Button type="submit"><RefreshCw /> Job aktualisieren</Button>
            <AlertDialogDelete
              id={id}
              resourceType="jobs"
              client:load
              triggerText="Job löschen"
              title="Sind Sie sicher, dass Sie diesen Job löschen möchten?"
              description="Dies wird den Job dauerhaft aus der Datenbank löschen."
              cancelText="Nein, abbrechen"
              actionText="Ja, löschen"
            />
          </div>
        </div>
      </form>
    </ComponentWrapper>
  </DashboardWrapper>
</Layout>
