---
import { getUpcomingJobsForUser } from "@/hooks/get-data";
import { formatDate } from "@/lib/utils";

import Layout from "@/layouts/Layout.astro";
import DashboardWrapper from "@/components/DashboardWrapper.astro";
import ProtectedComponent from "@/components/protected-component";
import { ComponentWrapper } from "@/components/ui/component-wrapper";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Eye, CalendarDays, CheckCircle, MapPinHouse } from "lucide-react";

const { userData } = Astro.locals;

// üîê Redirecionar se n√£o estiver autenticado
if (!userData) {
  return Astro.redirect("/auth/login");
}

// üîç Buscar jobs atribu√≠dos a este utilizador, ordenados por data desc
const assignedJobs = await getUpcomingJobsForUser(userData.id);
---

<Layout title="Zugewiesene Stellen">
  <DashboardWrapper>
    <ProtectedComponent allowedRoles={["user"]} userRole={userData.role.id}>
      <ComponentWrapper name="Zugewiesene Stellen">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead><span class="flex items-center gap-2"><CalendarDays size={16}/>Schichten:</span></TableHead>
              <TableHead><span class="flex items-center gap-2"><CalendarDays size={16}/>Datum:</span></TableHead>
              <TableHead><span class="flex items-center gap-2"><MapPinHouse size={16}/>Wohngruppe:</span></TableHead>
              <TableHead className="text-right"></TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {assignedJobs.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} className="text-center text-muted-foreground py-6">
                  Du hast keine bevorstehenden Jobs zugewiesen.<br />
                  Sobald du einen annimmst oder dir einer zugewiesen wird, erscheinen sie hier.
                </TableCell>
              </TableRow>
            ) : (
            assignedJobs.map((job) => (
                <TableRow key={job.id}>
                  <TableCell>{job.shift.name} - {job.shift.details}</TableCell>
                  <TableCell>{formatDate(job.date, "short") ?? "Not provided"}</TableCell>
                  <TableCell>{job.property.name}</TableCell>
                  <TableCell className="text-right flex justify-end items-center gap-2">
                    <Button variant={"outline"}>
                      <a href={`/jobs/${job.id}`}><Eye /></a>
                    </Button>
                    {(userData.education.id === job.education.id) && (userData.role.id === "user" ) && (
                      !job.assignedTo ? (
                        <Button
                          onClick={() => assignJob(job.id)}
                          className="bg-green-600 text-white cursor-pointer"
                          size="sm"
                        >
                          <CheckCircle size={16} /> Job annehmen
                        </Button>
                      ) : (
                        <Button disabled className="bg-gray-400 text-white cursor-not-allowed">
                          <CheckCircle className="mr-2" size={16} /> Vergeben
                        </Button>
                      )
                    )}

                  </TableCell>

                </TableRow>
              ))
            )}
          </TableBody>
          
        </Table>
      </ComponentWrapper>
    </ProtectedComponent>
  </DashboardWrapper>
</Layout>
