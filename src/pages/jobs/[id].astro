---
import { formatDate } from "@/lib/utils";
import Layout from "@/layouts/Layout.astro"
import DashboardWrapper from "@/components/DashboardWrapper.astro";
import { Button } from "@/components/ui/button";
import { AlertDialogDelete } from "@/components/alert-dialog-delete";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Pencil, CalendarDays, Award, GalleryVerticalEnd, Fingerprint, User, CheckCircle, FileText, UserCircle } from "lucide-react";
import { getJobSingleData } from "@/hooks/get-data";

const { userData } = Astro.locals;
const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/404");
}

const job = await getJobSingleData(id);
if (!job) {
  return Astro.redirect("/404");
}
---

<Layout title={job.title}>
  <DashboardWrapper>
    <div class="flex w-full scroll-mt-16 flex-col rounded-lg border">
      <div class="border-b px-4 py-3 flex flex-col lg:flex-row lg:justify-between lg:items-center gap-y-6 lg:gap-y-0">
        <div class="flex flex-col lg:flex-row items-start lg:items-center gap-x-4 gap-y-2 lg:gap-y-0">
          <h1 class="text-lg font-semibold break-all">{job.title}</h1>
          <span class="relative rounded bg-muted px-2 py-1 font-mono text-xs font-medium flex items-center gap-x-2">
            <Fingerprint size={16}/> {id}
          </span>
        </div>

        <div class="flex flex-col lg:flex-row lg:items-center gap-y-2 lg:gap-y-0 gap-x-3 text-sm">
          <span class="flex items-center gap-x-1">
            <GalleryVerticalEnd size={16}/> <span class="font-medium">Pool:</span> {job.pool.name || "Not provided"}
          </span>
          <span class="flex items-center gap-x-1">
            <Award size={16}/> <span class="font-medium">Status:</span> {job.status.name || "Not provided"}
          </span>
          <span class="flex items-center gap-x-1">
            <CalendarDays size={16}/> <span class="font-medium">Job Date:</span> {formatDate(job.date, "short") ?? "Not provided"}
          </span>
        </div>
      </div>

      <div class="p-6 grid grid-cols-1 lg:grid-cols-2 gap-4">
        <Card className="shadow-none">
          <CardHeader>
            <CardTitle className="flex items-center gap-x-2"><FileText size={16}/> Descrição</CardTitle>
          </CardHeader>
          <CardContent>
            <p>{job.description}</p>
          </CardContent>
        </Card>

        {job.notes && (
          <Card className="shadow-none">
            <CardHeader>
              <CardTitle className="flex items-center gap-x-2"><FileText size={16}/> Notas</CardTitle>
            </CardHeader>
            <CardContent>
              <p>{job.notes}</p>
            </CardContent>
          </Card>
        )}

        <Card className="shadow-none">
          <CardHeader>
            <CardTitle className="flex items-center gap-x-2"><User size={16}/> Atribuído a</CardTitle>
          </CardHeader>
          <CardContent>
            {job.assignedTo && job.assignedTo.email ? (
              <p>{job.assignedTo.name} {job.assignedTo.surname} ({job.assignedTo.email})</p>
            ) : (
              <p class="text-muted-foreground">Não atribuído</p>
            )}
          </CardContent>
        </Card>

        {job.createdBy && (
          <Card className="shadow-none">
            <CardHeader>
              <CardTitle className="flex items-center gap-x-2"><UserCircle size={16}/> Criado por</CardTitle>
            </CardHeader>
            <CardContent>
              <p>{job.createdBy.name} {job.createdBy.surname} ({job.createdBy.email})</p>
              <p class="text-sm text-muted-foreground mt-2"><CalendarDays size={16} className="inline-block mr-1" />{formatDate(job.createdAt)}</p>
            </CardContent>
          </Card>
        )}
      </div>

      <div class="flex justify-end gap-x-4 p-6">
        {(userData.role === 'level_01' || userData.role === 'level_02') && (
          !job.assigned ? (
            <form method="post" action="/api/jobs/assign">
              <input type="hidden" name="jobId" value={job.id} />
              <Button type="submit" className="bg-green-600 text-white cursor-pointer" size="sm">
                <CheckCircle size={16} /> Apply
              </Button>
            </form>
          ) : (
            <Button disabled className="bg-gray-400 text-white cursor-not-allowed">
              <CheckCircle className="mr-2" size={16} /> Taken
            </Button>
          )
        )}

        {(userData.role === 'admin' || userData.role === 'super_admin') && (
          <>
            <Button><Pencil /><a href={`/jobs/edit/${id}`}> Edit Job</a></Button>
            <AlertDialogDelete
              id={id}
              resourceType="jobs"
              client:load
              triggerText="Delete Job"
              title="Are you sure you want to delete this Job?"
              description="This will permanently delete the job from the database."
              cancelText="No, cancel"
              actionText="Yes, delete"
            />
          </>
        )}
      </div>
    </div>
  </DashboardWrapper>
</Layout>
