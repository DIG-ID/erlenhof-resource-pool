---

import { getJobsData } from "@/hooks/get-data";
import { useJobActions } from "@/hooks/useJobActions";
import type { Jobs } from "@/lib/types";
import { formatDate } from "@/lib/utils";
import { Timestamp } from "firebase-admin/firestore";

import Layout from "@/layouts/Layout.astro";
import DashboardWrapper from "@/components/DashboardWrapper.astro";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { AlertDialogDelete } from "@/components/alert-dialog-delete";
import { Pencil, Plus, Eye, GalleryVerticalEnd, Award, CalendarDays, CheckCircle, GraduationCap } from "lucide-react";
import { ComponentWrapper } from "@/components/ui/component-wrapper";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";

const { userData } = Astro.locals;

const jobs = (await getJobsData()) ?? [];
const { assignJob } = useJobActions();
---

<Layout title="Jobs">
  <DashboardWrapper>
    <ComponentWrapper name="jobs">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Title</TableHead>
            <TableHead>Description</TableHead>
            <TableHead><span class="flex items-center gap-2"><GraduationCap size={16}/>Education:</span></TableHead>
            <TableHead><span class="flex items-center gap-2"><CalendarDays size={16}/>Shift:</span></TableHead>
            <TableHead><span class="flex items-center gap-2"><Award size={16}/>Status</span></TableHead>
            <TableHead><span class="flex items-center gap-2"><CalendarDays size={16}/>Job Date:</span></TableHead>
            <TableHead><span class="flex items-center gap-2"><GalleryVerticalEnd size={16}/>Current Pool</span></TableHead>
            <TableHead className="text-right"></TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {jobs.length === 0 ? (
            <TableRow>
              <TableCell colSpan={8} className="text-center text-muted-foreground py-6">
                Não existem jobs disponíveis de momento. Por favor, adicione um novo job.
              </TableCell>
            </TableRow>
          ) : (
            jobs.map((job) => (
              <TableRow key={job.id}>
                <TableCell className="font-medium">{job.title}</TableCell>
                <TableCell className="truncate max-w-[100px]">{job.description}</TableCell>
                <TableCell>{job.education.name}</TableCell>
                <TableCell>{job.shift.name}</TableCell>
                <TableCell>
                  {job.status.id === "open" ? (
                    <Badge className="bg-blue-500 text-white hover:bg-blue-600">Open</Badge>
                  ) : (
                    <Badge variant="secondary">Done</Badge>
                  )}
                </TableCell>

                <TableCell>{job.date instanceof Timestamp ? formatDate(job.date, "short") : "Not provided"}</TableCell>
                <TableCell>{job.pool.name}</TableCell>
                <TableCell className="text-right flex justify-end items-center gap-2">
                  {(userData.education.id === job.education.id) && (userData.role.id === "user" ) && (
                    !job.assignedTo ? (
                      <Button
                        onClick={() => assignJob(job.id)}
                        className="bg-green-600 text-white cursor-pointer"
                        size="sm"
                      >
                        <CheckCircle size={16} /> Apply
                      </Button>
                    ) : (
                      <Button disabled className="bg-gray-400 text-white cursor-not-allowed">
                        <CheckCircle className="mr-2" size={16} /> Taken
                      </Button>
                    )
                  )}
                  <Button variant={"outline"}>
                    <a href={`/jobs/${job.id}`}><Eye /></a>
                  </Button>
                  {(userData.role.id === 'admin' || userData.role.id === 'super_admin') && (
                    <>
                      <Button><a href={`/jobs/edit/${job.id}`}><Pencil /></a></Button>
                      <AlertDialogDelete
                        id={job.id}
                        resourceType="jobs"
                        client:load
                        triggerText=""
                        title="Are you sure you want to delete this Job?"
                        description="This will permanently delete the job from the database."
                        cancelText="No, cancel"
                        actionText="Yes, delete"
                      />
                    </>
                  )}
                </TableCell>

              </TableRow>
            ))
          )}
        </TableBody>
        
      </Table>
    </ComponentWrapper>
    { (userData.role.id === 'property' || userData.role.id === 'super_admin') && (
      <Button className="self-end"><Plus /><a href={`/jobs/add`}>Add New Job</a></Button>
    )}
  </DashboardWrapper>
</Layout>
