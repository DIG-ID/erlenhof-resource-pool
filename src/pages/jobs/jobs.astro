---
import { app } from "@/firebase/server";
import { getFirestore } from "firebase-admin/firestore";
import Dashboard from "@/layouts/Dashboard.astro";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { AlertDialogDJ } from "@/components/alert-dialog-del-job";
import { Pencil, Plus } from "lucide-react";
import { ComponentWrapper } from "@/components/ui/component-wrapper";
import { Button } from "@/components/ui/button";

interface Job {
  id: string;
  title: string;
  smallDescription: string;
  roles: string;
  status: string;
  createdAt: {
    seconds: number;
    nanoseconds: number;
  };
}

const db = getFirestore(app);

const jobsRef = db.collection("jobs");
const jobsSnapshot = await jobsRef.get();
const jobs = jobsSnapshot.docs.map((doc) => ({
  id: doc.id,
  ...doc.data(),
})) as Job[];


// Função para formatar o timestamp em uma data legível
const formatDate = (timestamp: { seconds: number; nanoseconds: number }) => {
  const date = new Date(timestamp.seconds * 1000); // Converte para milissegundos
  return date.toLocaleDateString("en-GB", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  });
}

---

<Dashboard title="Jobs">

  <ComponentWrapper name="jobs-list">
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Title</TableHead>
          <TableHead>Description</TableHead>
          <TableHead>Pool</TableHead>
          <TableHead>Status</TableHead>
          <TableHead>Created:</TableHead>
          <TableHead className="text-right"></TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {jobs.map((job) => (
          <TableRow key={job.id}>
            <TableCell className="font-medium"><a href={`/jobs/${job.id}`}>{job.title}</a></TableCell>
            <TableCell>{job.smallDescription}</TableCell>
            <TableCell>{job.roles}</TableCell>
            <TableCell>{job.status}</TableCell>
            <TableCell>{formatDate(job.createdAt)}</TableCell>
            <TableCell className="text-right">
              <Button size="sm" ><a href={`/jobs/edit/${job.id}`}><Pencil /></a></Button>
              <AlertDialogDJ
                  client:idle
                  triggerText=""
                  title="Are you sure you want to delete this job?"
                  description="This will permanently delete the job from the database."
                  cancelText="No, cancel"
                  actionText="Yes, delete"
                  onAction={() => alert("Job deleted!")}
                />
            </TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  </ComponentWrapper>

  <Button className="self-end"><Plus /><a href={`/jobs/add`}>Add New Job</a></Button>

</Dashboard>
